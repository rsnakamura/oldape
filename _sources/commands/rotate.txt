The Rotate
==========

A command-line interface to run the rotate command remotely.

::

    SIGKILL = 9
    PROCESS = 'rotate'
    
    



RotateError
-----------

.. uml::

   CommandError <|-- RotateError
   
::

    class RotateError(CommandError):
        """
        An error in the rotation
        """
    # end class RotateError
    
    



RotateArgumentsGenerator
------------------------

This is a class intended for the RotateCommand.__call__. It generates arguments based on what settings it gets. It is only concerned with the argument string(s) needed to be sent to the rotate command. Something else will have to make sure that the right arguments are sent to the right table.

.. uml::

   RotateArgumentsGenerator o- ConfigurationMap

.. module:: apetools.commands.rotate
.. autosummary::
   :toctree: api

   RotateArgumentsGenerator
   RotateArgumentsGenerator.base_arguments
   RotateArgumentsGenerator.values_string
   RotateArgumentsGenerator.booleans_string
   RotateArgumentsGenerator.angles
   RotateArgumentsGenerator.argument_strings
   RotateArgumentsGenerator.__len__
   RotateArgumentsGenerator.__lt__
   RotateArgumentsGenerator.__le__
   RotateArgumentsGenerator.__eq__
   RotateArgumentsGenerator.__ne__
   RotateArgumentsGenerator.__gt__
   RotateArgumentsGenerator.__ge__   



The basic idea (assuming you only have one table) is that you would traverse the `argument_strings` and send them to the call.

::

    rotate = RotateCommand(connections=connection)
    parameters = RotateArgumentsGenerator(configuration, section='table1')
    for arguments in parameters.argument_strings:
        rotate(arguments)

This is not nearly so straight-forward in the builders themselves since the rotate is called in between the iperf calls... how does this work?

RotateCommand
-------------

.. module:: apetools.commands.rotate
.. autosummary::
   :toctree: api

   RotateCommand
   RotateCommand.killers
   RotateCommand.kill_process
   RotateCommand.rotate
   RotateCommand.__call__
   RotateCommand.check_errors

This is the original rotate command when the tables were giving feedback for their positions.
   


.. _apetools-rotate-command-usurper:

The RotateCommandUsurper
------------------------

This is the newer rotate command (as of November 3, 2014) that uses the replacement turntables built with raised platforms to temper the effects of electro-magnetic interference created by the turntable's motor. As with the other command, it's just sending and receiving strings over SSH so any device that implements the same interface will work.

.. '

.. uml::

   RotateCommand <|-- RotateCommandUsurper

.. autosummary::
   :toctree: api

   RotateCommandUsurper
   RotateCommandUsurper.__call__
   RotateCommandUsurper.rotate

::

    # this is for the builder to set the name of the parameters
    ROTATE_USURPER_NAME = 'rotate_usurper'
    

